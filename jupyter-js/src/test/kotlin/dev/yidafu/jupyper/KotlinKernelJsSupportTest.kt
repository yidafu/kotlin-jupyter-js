/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.yidafu.jupyper

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.buildJsonObject
import org.jetbrains.kotlinx.jupyter.api.JSON
import org.jetbrains.kotlinx.jupyter.api.MimeTypedResult
import org.jetbrains.kotlinx.jupyter.api.MimeTypes
import org.jetbrains.kotlinx.jupyter.api.htmlResult
import org.jetbrains.kotlinx.jupyter.testkit.JupyterReplTestCase
import org.jetbrains.kotlinx.jupyter.testkit.ReplProvider
import kotlin.test.Test
import kotlin.test.assertContains
import kotlin.test.assertIs

class KotlinKernelJsSupportTest : JupyterReplTestCase(
    ReplProvider.withDefaultClasspathResolution(),
) {

    @Test
    fun `test Randable result`() {
        println(Json.encodeToString(htmlResult("<div>TEXT</div>").toJson()))
        println(Json.encodeToString(htmlResult("<div>TEXT</div>", true).toJson()))
        println(Json.encodeToString(JSON(buildJsonObject { }).toJson()))
    }

    @Test
    fun `import variable from kotlin world`() {
        exec(
            """
            USE {
                addCodePreprocessor(dev.yidafu.jupyper.JavaScriptMagicCodeProcessor(this.notebook));
            }
            """.trimIndent(),
        )
        exec(""" val foo = "string" """)
        val result = exec(
            """
            %js
            import { foo } from "@jupyter";

            var b = 345

            console.log(b)
        """.trimIndent(),
        )

        assertIs<MimeTypedResult>(result)
        (result[MimeTypes.HTML] as String).contains("const foo = \"string\";")
    }

    @Test
    fun `render jsx code to js`() {
        exec(
            """
            USE {
                addCodePreprocessor(dev.yidafu.jupyper.JavaScriptMagicCodeProcessor(this.notebook));
            }
            """.trimIndent(),
        )
        exec(""" val foo = "string" """)

        val result = exec(
            """
            %jsx
            
            import { foo } from "@jupyter";

            export default function App() {
                return <div>{foo}</div>
            }
        """.trimIndent(),
        ) as MimeTypedResult
        assertContains((result[MimeTypes.HTML] as String), "React.createElement")
        println((result[MimeTypes.HTML] as String))
    }
}
